package junit

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// Unit test generated by granite-code:8b
func Test_AddSuite(t *testing.T) {
	suites := NewTestSuites("test")

	suite1 := TestSuite{
		Tests:    5,
		Failures: 2,
		Skipped:  3,
	}

	suites.AddSuite(suite1)
	assert.EqualValues(t, len(suites.Suites), 1)
	assert.EqualValues(t, suites.Tests, suite1.Tests)
	assert.EqualValues(t, suites.Failures, suite1.Failures)
	assert.EqualValues(t, suites.Skipped, suite1.Skipped)

	suite2 := TestSuite{
		Tests:    3,
		Failures: 0,
		Skipped:  1,
	}

	suite3 := TestSuite{
		Tests:    2,
		Failures: 1,
		Skipped:  0,
	}

	suites = suites.WithSuite(suite2).WithSuite(suite3)
	assert.EqualValues(t, len(suites.Suites), 3)
	assert.EqualValues(t, suites.Tests, suite1.Tests+suite2.Tests+suite3.Tests)
	assert.EqualValues(t, suites.Failures, suite1.Failures+suite2.Failures+suite3.Failures)
	assert.EqualValues(t, suites.Skipped, suite1.Skipped+suite2.Skipped+suite3.Skipped)
}

// Unit test generated by granite-code:8b
func Test_AddCase(t *testing.T) {
	suite := &TestSuite{}
	case1 := TestCase{Failure: nil, SkipMessage: nil}
	case2 := TestCase{Failure: &Failure{}, SkipMessage: nil}
	case3 := TestCase{Failure: nil, SkipMessage: &SkipMessage{}}
	case4 := TestCase{Failure: &Failure{}, SkipMessage: &SkipMessage{}}

	suite.AddCase(case1)
	assert.Equal(t, 1, suite.Tests)
	assert.Equal(t, 0, suite.Failures)
	assert.Equal(t, 0, suite.Skipped)

	suite = suite.WithCase(case2)
	assert.Equal(t, 2, suite.Tests)
	assert.Equal(t, 1, suite.Failures)
	assert.Equal(t, 0, suite.Skipped)

	suite.AddCase(case3)
	assert.Equal(t, 3, suite.Tests)
	assert.Equal(t, 1, suite.Failures)
	assert.Equal(t, 1, suite.Skipped)

	suite = suite.WithCase(case4)
	assert.Equal(t, 4, suite.Tests)
	assert.Equal(t, 2, suite.Failures)
	assert.Equal(t, 1, suite.Skipped)
}
